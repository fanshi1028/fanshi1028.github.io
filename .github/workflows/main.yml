
name: Build and deploy

on:
  push:
    branches: main
  pull_request:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-wasm-feature-detect:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31

      - uses: cachix/cachix-action@v16
        with:
          name: fanshi1028-personal
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Nix Build wasm-feature-detect
        run: |
          nix build .#wasm-feature-detect

      - uses: actions/upload-artifact@v4
        with:
          name: wasm-feature-detect
          path: result/lib/node_modules/wasm-feature-detect
          if-no-files-found: error
          retention-days: 1

  build-browser_wasi_shim:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31

      - uses: cachix/cachix-action@v16
        with:
          name: fanshi1028-personal
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Nix Build browser_wasi_shim
        run: |
          nix build .#browser_wasi_shim

      - uses: actions/upload-artifact@v4
        with:
          name: browser_wasi_shim
          path: result/lib/node_modules/@bjorn3/browser_wasi_shim
          if-no-files-found: error
          retention-days: 1

  build:
    runs-on: ubuntu-latest
    needs: [build-wasm-feature-detect, build-browser_wasi_shim]

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v31

      - uses: cachix/cachix-action@v16
        with:
          name: fanshi1028-personal
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          extraPullNames: haskell-miso-cachix

      - name: Cache cabal stuff
        uses: actions/cache@v4
        with:
          path: |
            ~/.ghc-wasm/.cabal/packages
            ~/.ghc-wasm/.cabal/store
            dist-newstyle
          key: cabal-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock', '**/*.cabal', '**/wasm.cabal.project') }}
          restore-keys: cabal-${{ runner.os }}-

      - name: Nix Develop (WASM) Cabal Build fanshi1028-site
        run: |
          mkdir -p public
          mkdir -p js
          nix develop .#wasm --command bash -c "make"

      - name: Nix Build fanshi1028-site-js
        run: |
          nix build .#fanshi1028-site-js
          cp -rv ./result/bin/fanshi1028-site.jsexe/*.js ./js/

      - name: No Bun Build
        run: |
          cp -rv ./js/* ./public/
          # nix develop .#wasm --command bash -c "bun build ./js/index.js --outdir ./public --minify --external ./all.js --external ./ghc_wasm_jsffi.js --external ./browser_wasi_shim/dist/index.js" 

      - name: Prerender using nix
        run: |
          nix run .#prerender
          cp -rv ./*.html ./public/

      - uses: actions/download-artifact@v5
        with:
          name: wasm-feature-detect
          path: public/wasm-feature-detect

      - uses: actions/download-artifact@v5
        with:
          name: browser_wasi_shim
          path: public/browser_wasi_shim

      - name: Archive artifact
        shell: sh
        run: |
          echo ::group::Archive artifact
          tar \
            --dereference --hard-dereference \
            --directory ./public \
            -cvf "$RUNNER_TEMP/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            --exclude=".[^/]*" \
            .
          du -h $RUNNER_TEMP/artifact.tar
          echo ::endgroup::

      # - name: Archive artifact zstd
      #   shell: sh
      #   run: |
      #     echo ::group::Archive artifact
      #     tar \
      #       --use-compress-program "zstd -T0 --ultra -22" \
      #       --dereference --hard-dereference \
      #       --directory ./public \
      #       -cvf "$RUNNER_TEMP/artifact.tar.zst" \
      #       --exclude=.git \
      #       --exclude=.github \
      #       --exclude=".[^/]*" \
      #       .
      #     du -h $RUNNER_TEMP/artifact.tar.zst
      #     echo ::endgroup::

      # - name: Archive artifact brotli
      #   shell: sh
      #   if: runner.os == 'Linux'
      #   run: |
      #     echo ::group::Archive artifact
      #     tar \
      #       --use-compress-program "brotli -q11" \
      #       --dereference --hard-dereference \
      #       --directory ./public \
      #       -cvf "$RUNNER_TEMP/artifact.tar.br \
      #       --exclude=.git \
      #       --exclude=.github \
      #       --exclude=".[^/]*" \
      #       .
      #     du -h $RUNNER_TEMP/artifact.tar.br
      #     echo ::endgroup::

      - name: Upload artifact
        id: upload-artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: 'github-pages'
          path: ${{ runner.temp }}/artifact.tar
          retention-days: "1"
          if-no-files-found: error

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    needs: build

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

