
name: Build and deploy

on:
  push:
    branches: main
  pull_request:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 1G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never

      # - uses: cachix/install-nix-action@v31
      #   with:
      #     github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache cabal stuff
        uses: actions/cache@v4
        with:
          path: |
            ~/.ghc-wasm/.cabal/packages
            ~/.ghc-wasm/.cabal/store
            dist-newstyle
          key: cabal-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock', '**/*.cabal', '**/wasm.cabal.project') }}
          restore-keys: cabal-${{ runner.os }}-

      - name: Build using Nix
        run: nix develop .#wasm --command bash -c "make"

      - name: Nix Build browser_wasi_shim
        run: |
          nix build .#browser_wasi_shim
          cp -r ./result/lib/* ./public/

      - name: Archive artifact
        shell: sh
        run: |
          echo ::group::Archive artifact
          tar \
            --dereference --hard-dereference \
            --directory ./public \
            -cvf "$RUNNER_TEMP/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            --exclude=".[^/]*" \
            .
          du -h $RUNNER_TEMP/artifact.tar
          echo ::endgroup::

      # - name: Archive artifact zstd
      #   shell: sh
      #   run: |
      #     echo ::group::Archive artifact
      #     tar \
      #       --use-compress-program "zstd -T0 --ultra -22" \
      #       --dereference --hard-dereference \
      #       --directory ./public \
      #       -cvf "$RUNNER_TEMP/artifact.tar.zst" \
      #       --exclude=.git \
      #       --exclude=.github \
      #       --exclude=".[^/]*" \
      #       .
      #     du -h $RUNNER_TEMP/artifact.tar.zst
      #     echo ::endgroup::

      # - name: Archive artifact brotli
      #   shell: sh
      #   if: runner.os == 'Linux'
      #   run: |
      #     echo ::group::Archive artifact
      #     tar \
      #       --use-compress-program "brotli -q11" \
      #       --dereference --hard-dereference \
      #       --directory ./public \
      #       -cvf "$RUNNER_TEMP/artifact.tar.br \
      #       --exclude=.git \
      #       --exclude=.github \
      #       --exclude=".[^/]*" \
      #       .
      #     du -h $RUNNER_TEMP/artifact.tar.br
      #     echo ::endgroup::

      - name: Upload artifact
        id: upload-artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: 'github-pages'
          path: ${{ runner.temp }}/artifact.tar
          retention-days: "1"
          if-no-files-found: error

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    needs: build

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

