---
title: Quick Design Pattern Recognition
---

* Background/Context
A few hours later, I gonna have an interview with an IT head of a start-up company.

The problem is, it seems that they mainly use java, which have never tasted. And it shouldn't be my cup of tea anyway.

#+attr_org: :width 300px
#+attr_html: :width 300px
[[../images/java.jpg]]

I think they are well-acknowledged that I don't know java(yet) in the previous round of interviews.

Yet I decided to have a quick tasting of some of the most iconic java tea ingredients before the interview, to see if I can get drunk from it.

Here I come, the almightea...

=Design Pattern=

* Source
- Link that I gonna use to speed-run :: [[https://www.tutorialspoint.com/design_pattern/index.htm]]

* Draining Tea
- Disclaimer :: below are my quick grokk of =Design Pattern= in just a few hours, so probably very opininated, and potentially going very wrong, so just chill about it.

  In case, you have any strong opinion of my opinion after reading this post, I hereby have a great gif (also great film, go find it and watch it!) for you.

  [[../images/it_is_just_your_opinion.gif]]

Let's start!

** Factory Pattern
- what :: create a Factory with dispatching method to create subclass
- why :: has a center place to refactor when adding or removing subclass
** Abstract Factory Pattern
- what :: create a Factory of Factory
- why??? :: probably over-engineered
** Singlton Pattern
- why :: ensure only one object created
- how :: Make constructor private, instantiated the only object internally in the class, and a method to get the object
** Builder Pattern
- what :: build complex object from simple one
- when :: when object creation is complex/involve many smaller components
** Prototype Pattern
- what :: cache
- when :: when object creation are expensive
** Adapter Pattern
- what :: brige between two incompatible interface
- why :: price to pay for existing wrong abstraction.
- how :: use and hide object of another interface in an adapter interface
** Bridge Pattern
- what :: decouple abstraction from implementation
- how :: has an api class, pass it to constructor of the object class to pick implementation
- what really :: verbose manual typeclass
** Filter Pattern
- what :: combine filter
- what really :: verbose Semigroup instance for filter
** Composite Pattern
- what :: group of object as tree
- why :: representation hierarchy between object
- question :: java should have some ~Tree<A>~ type/interface to avoid manually write a Tree class every time?
** Decorator Pattern
- what :: decorator class wraping existing class to amend it behaviour
** Facade Pattern
- what :: just a interface wraping existing system and group all its api, nothing special
** Flyweight Pattern
- what :: kind of a mix of Prototype Pattern and Factory Pattern.
- how :: having cache in Factory
- why :: decrease memory footprint
** Proxy Pattern
- what :: class wrapping to do lazy loading of resource
- what really :: price paid for the crime that existing class should be lazy from the start
** Chain of Responsibility Pattern
- what :: abstraction for linked list of subclass running one by one
** Command Pattern
- what :: decouple command and execution, nothing special
** Intepreter Pattern
- what :: very verbose and unflexible way to write interpreter
** Iterator Pattern
- what :: iterator interface for container
** Mediator Pattern
- what :: just object use method from an external class? nothing special?
** Memento Pattern
- what :: interfaces for caching snapshot.
** Observer Pattern
- what :: kind of like reactive programing
- how :: interfaces of observer that can be attach to object and subscribe to changes
** State Pattern
- what :: just verbose State Monad which store State which its each subclass are its possible state
** Null Object Pattern
- what :: provide subclass of "null case"
** Strategy Pattern :TBE:
** Template Pattern :TBE:
** Visitor Pattern :TBE:
** MVC Pattern :TBE:
** Business Delegate Pattern :TBE:
** Composite Entity Pattern :TBE:
** Data Access Object Pattern :TBE:
** Front Controller Pattern :TBE:
** Intercepting Filter Pattern :TBE:
** Service Locator Pattern :TBE:
** Transfer Object Pattern :TBE:
